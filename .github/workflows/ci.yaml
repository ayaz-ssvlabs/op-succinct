name: CI Tests

on:
  pull_request:
  push:
    branches:
      - main
  issue_comment:
    types: [created]
  workflow_dispatch:
    inputs:
      e2e_test_filter:
        description: 'E2E test name filter (optional)'
        required: false
        default: ''

env:
  FOUNDRY_PROFILE: ci

jobs:
  # Check if comment trigger should run tests
  check-comment:
    name: Check Comment Trigger
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'issue_comment' && 
      github.event.issue.pull_request && 
      contains(github.event.comment.body, '/ci-authorize') &&
      (github.event.comment.author_association == 'OWNER' || 
       github.event.comment.author_association == 'MEMBER' || 
       github.event.comment.author_association == 'COLLABORATOR')
    outputs:
      should_run: ${{ steps.check.outputs.should_run }}
      pr_number: ${{ steps.check.outputs.pr_number }}
      pr_sha: ${{ steps.get_pr.outputs.pr_sha }}
    steps:
      - name: Check trigger conditions
        id: check
        run: |
          echo "should_run=true" >> $GITHUB_OUTPUT
          echo "pr_number=${{ github.event.issue.number }}" >> $GITHUB_OUTPUT
      
      - name: Get PR SHA
        id: get_pr
        uses: actions/github-script@v7
        with:
          script: |
            const pr = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: ${{ github.event.issue.number }}
            });
            core.setOutput('pr_sha', pr.data.head.sha);
      
      - name: Set PR SHA output
        id: set_sha
        run: |
          echo "pr_sha=${{ steps.get_pr.outputs.pr_sha }}" >> $GITHUB_OUTPUT

      - name: Add reaction to comment
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.reactions.createForIssueComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: ${{ github.event.comment.id }},
              content: 'rocket'
            });
  # Foundry Tests Job
  foundry-tests:
    name: Foundry Tests
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'push' || 
       github.event_name == 'workflow_dispatch' ||
       (github.event_name == 'pull_request' && 
        (github.event.pull_request.author_association == 'OWNER' || 
         github.event.pull_request.author_association == 'MEMBER' || 
         github.event.pull_request.author_association == 'COLLABORATOR')) ||
       (github.event_name == 'issue_comment' && 
        github.event.issue.pull_request && 
        contains(github.event.comment.body, '/ci-authorize') &&
        (github.event.comment.author_association == 'OWNER' || 
         github.event.comment.author_association == 'MEMBER' || 
         github.event.comment.author_association == 'COLLABORATOR')))
    steps:
      - name: Get PR info for comment trigger
        if: github.event_name == 'issue_comment'
        id: pr_info
        uses: actions/github-script@v7
        with:
          script: |
            const pr = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: ${{ github.event.issue.number }}
            });
            core.setOutput('head_sha', pr.data.head.sha);
            
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          ref: ${{ github.event_name == 'issue_comment' && steps.pr_info.outputs.head_sha || '' }}

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: stable

      - name: Show Forge version
        working-directory: contracts/
        run: |
          forge --version

      - name: Run Forge fmt
        working-directory: contracts/
        run: |
          forge fmt --check src/ test/ script/
        id: fmt

      - name: Run Forge build
        working-directory: contracts/
        run: |
          forge build --sizes
        id: build

      - name: Run Forge tests
        working-directory: contracts/
        run: |
          forge test -vvv
        id: test
        env:
          L2_NODE_RPC: ${{ secrets.L2_NODE_RPC }}
          L1_RPC: ${{ secrets.L1_RPC }}

  # Integration Tests Job
  integration-tests:
    name: Integration Tests
    runs-on:
      - runs-on
      - cpu=16
      - ram=64
      - family=m7a+m7i-flex
      - image=ubuntu22-full-x64
      - run-id=${{ github.run_id }}
    # Only run automatically for maintainers, require manual trigger for external contributors
    if: |
      (github.event_name == 'push' || 
       github.event_name == 'workflow_dispatch' ||
       (github.event_name == 'pull_request' && 
        (github.event.pull_request.author_association == 'OWNER' || 
         github.event.pull_request.author_association == 'MEMBER' || 
         github.event.pull_request.author_association == 'COLLABORATOR')) ||
       (github.event_name == 'issue_comment' && 
        github.event.issue.pull_request && 
        contains(github.event.comment.body, '/ci-authorize') &&
        (github.event.comment.author_association == 'OWNER' || 
         github.event.comment.author_association == 'MEMBER' || 
         github.event.comment.author_association == 'COLLABORATOR')))
    steps:
      - name: Get PR info for comment trigger
        if: github.event_name == 'issue_comment'
        id: pr_info
        uses: actions/github-script@v7
        with:
          script: |
            const pr = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: ${{ github.event.issue.number }}
            });
            core.setOutput('head_sha', pr.data.head.sha);
            
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event_name == 'issue_comment' && steps.pr_info.outputs.head_sha || '' }}

      - name: Setup CI
        uses: ./.github/actions/setup

      - name: Run cost estimator on recent block range
        run: |
          RUST_LOG=info cargo run --bin cost-estimator --release -- --rolling
        env:
          L2_NODE_RPC: ${{ secrets.L2_NODE_RPC }}
          L1_RPC: ${{ secrets.L1_RPC }}
          L1_BEACON_RPC: ${{ secrets.L1_BEACON_RPC }}
          L2_RPC: ${{ secrets.L2_RPC }}

  # E2E Tests Job
  e2e-tests:
    name: E2E Tests
    runs-on:
      - runs-on
      - runner=64cpu-linux-x64
      - run-id=${{ github.run_id }}
    timeout-minutes: 30
    # Only run automatically for maintainers, require manual trigger for external contributors
    if: |
      (github.event_name == 'push' || 
       github.event_name == 'workflow_dispatch' ||
       (github.event_name == 'pull_request' && 
        (github.event.pull_request.author_association == 'OWNER' || 
         github.event.pull_request.author_association == 'MEMBER' || 
         github.event.pull_request.author_association == 'COLLABORATOR')) ||
       (github.event_name == 'issue_comment' && 
        github.event.issue.pull_request && 
        contains(github.event.comment.body, '/ci-authorize') &&
        (github.event.comment.author_association == 'OWNER' || 
         github.event.comment.author_association == 'MEMBER' || 
         github.event.comment.author_association == 'COLLABORATOR')))
    steps:
    - name: Get PR info for comment trigger
      if: github.event_name == 'issue_comment'
      id: pr_info
      uses: actions/github-script@v7
      with:
        script: |
          const pr = await github.rest.pulls.get({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: ${{ github.event.issue.number }}
          });
          core.setOutput('head_sha', pr.data.head.sha);
          
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
        ref: ${{ github.event_name == 'issue_comment' && steps.pr_info.outputs.head_sha || '' }}
      
    - name: Setup Rust
      run: |
        rustup toolchain install stable --profile minimal
        rustup component add rustfmt clippy
        
    - name: Install Foundry
      uses: foundry-rs/foundry-toolchain@v1
      with:
        version: nightly-d592b3e0f142d694c3be539702704a4a73238773
        
    - name: Cache Rust dependencies
      uses: Swatinem/rust-cache@v2
      with:
        workspaces: |
          .
          bindings
        
    - name: Run E2E tests
      run: |
        if [ -n "${{ github.event.inputs.e2e_test_filter }}" ]; then
          cargo test --release --test e2e ${{ github.event.inputs.e2e_test_filter }} -- --test-threads=1 --nocapture
        else
          cargo test --release --test e2e -- --test-threads=1 --nocapture
        fi
      env:
        L1_RPC: ${{ secrets.L1_RPC }}
        L1_BEACON_RPC: ${{ secrets.L1_BEACON_RPC }}
        L2_RPC: ${{ secrets.L2_RPC }}
        L2_NODE_RPC: ${{ secrets.L2_NODE_RPC }}
        
    - name: Upload test logs on failure
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: e2e-test-logs
        path: |
          **/*.log
          target/debug/deps/*.log
        retention-days: 7

  # Cargo Tests Job
  cargo-tests:
    name: Cargo Tests
    runs-on:
      - runs-on
      - runner=64cpu-linux-x64
      - run-id=${{ github.run_id }}
    # Only run automatically for maintainers, require manual trigger for external contributors
    if: |
      (github.event_name == 'push' || 
       github.event_name == 'workflow_dispatch' ||
       (github.event_name == 'pull_request' && 
        (github.event.pull_request.author_association == 'OWNER' || 
         github.event.pull_request.author_association == 'MEMBER' || 
         github.event.pull_request.author_association == 'COLLABORATOR')) ||
       (github.event_name == 'issue_comment' && 
        github.event.issue.pull_request && 
        contains(github.event.comment.body, 'CI AUTHORIZE') &&
        (github.event.comment.author_association == 'OWNER' || 
         github.event.comment.author_association == 'MEMBER' || 
         github.event.comment.author_association == 'COLLABORATOR')))
    steps:
    - name: Get PR info for comment trigger
      if: github.event_name == 'issue_comment'
      id: pr_info
      uses: actions/github-script@v7
      with:
        script: |
          const pr = await github.rest.pulls.get({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: ${{ github.event.issue.number }}
          });
          core.setOutput('head_sha', pr.data.head.sha);
          
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
        ref: ${{ github.event_name == 'issue_comment' && steps.pr_info.outputs.head_sha || '' }}
    - name: Install Foundry
      uses: foundry-rs/foundry-toolchain@v1
      with:
        version: nightly
    - run: rustup toolchain install stable --profile minimal
    - uses: Swatinem/rust-cache@v2  
    - name: Test
      run: cargo test --release -- --skip test_cycle_count_diff --skip test_post_to_github --skip test_honest_proposer --skip test_honest_challenger
      env:
        L2_NODE_RPC: ${{ secrets.L2_NODE_RPC }}
        L1_RPC: ${{ secrets.L1_RPC }}
        L1_BEACON_RPC: ${{ secrets.L1_BEACON_RPC }}
        L2_RPC: ${{ secrets.L2_RPC }}
        REPO_OWNER: ${{ github.repository_owner }}
        REPO_NAME: ${{ github.event.repository.name }}
        PR_NUMBER: ${{ github.event.pull_request.number }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        POST_TO_GITHUB: ${{ github.event_name == 'pull_request' }}